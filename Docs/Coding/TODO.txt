
Lines (total/code):
19.04.12 - 228543/144048
17.05.13 -  72994/49978
16.07.13 -  61679/42998
30.07.13 -  62057/43398
19.09.13 -  62274/43596
09.01.14 -  63118/44285
13.04.14 -  63775/44799

Release EXE metrics:
30.04.13 - Compile 0:53, Build 1:27, Size 4354 KB // SSD
17.06.13 - Compile 0:48, Build 1:12, Size 3619 KB // SSD
30.07.13 - Compile 0:49, Build 1:14, Size 3683 KB // SSD
19.09.13 - Compile 0:49, Build 1:14, Size 3688 KB // SSD
09.01.14 - Compile 0:48, Build 1:12, Size 3724 KB // SSD
12.04.14 - Compile 0:49, Build 1:17, Size 3848 KB // SSD

=========================================================
<NEVER FORGET>
=========================================================
1. JPEG textures are loaded for too long. Especially 2000x4000 door diffuse textures -_-
2. If character goes to the world origin, check ray-world intersection, when it is broken, mouse 3D pos can be Zero.
3. Always initialize third-party objects. Remember character controller debugging with btQuaternion full of trash.
4. Printing 'T' in a console teleports character, because debug 'T' mapping and UI textbox react on different events.

=========================================================
<Tasks to complete demo>
* - need to implement ASAP
=========================================================

0. BUGS
-------
Close UI connected to entities when that entities are deleted (deactivated) or their props are invalidated
 - Reference entities in UI only by UID
 -???global events on entity deactivation and renaming?
Sometimes camera rotation mode isn't being disabled when MMB is released
{ [ { } ] } problem in data schemes
Changing Gfx adapter crashes in one of directions
Click on Broom sometimes leads to no action
 - navmesh in that place is really weird, with AcceptNearestValidDest it is not always work, because in area
   covered by one poly (as we expect) some other polys can overlay, and seems that polys aren't convex
Arei can't start talking if GG moves from initial position
 - if GG moves from Arei, sometimes Arei detects that he can never reach GG (interception time < 0)
Double click on UI window passes through UI and adds task, which is wrong
Fix reference counting in D3D code
???CRefCounted leak detection?
When drag window border, send special message OnManualResizeEnd not to resize swap chains 100500 times
Catch when DXGI relinquishes fullscreen and update swap chain status
Close DXGI fullscreen swap chain - breaks screen

I.a. Low-level code
-------------------
Scene activator attr
Scene dynamic loader attr
Can implement CSceneNode::Clone/DeepCopy to instantiate models loaded once from scn
DebugDraw must only collect renderable elements, and then pass them into renderers
	So that debug shapes and texts will be render objects, that store necessary data, and specific rendering
	techs are implemented in renderers
	Or renderers should split on object renderers, text renderers etc with only vitual Render() in the root class
Split L1 on parts, reduce dependencies
Cleanup Math
Remove math headers from CString, use utils for it
Fix performance of ray-heightfield test
Ragdoll (???handle through the animation task?)
Cutscene system
String::Reserve
Standartize collections interface
Solve P->Get(CStrID, CStrID) by renaming to GetSafe or TryGet or smth, key prm is FIRST

I.b. Tools
----------
CFTexture conversion tool for the CF (to DDS and other appropriate formats)
CFModel OBJ & FBX exporter tool to a new mesh format, export anims etc too
Remove old unused CF code
Game editor tool (CIDE2)
BBuilder command line interface for CIDE2
BBuilder data-driven export links scheme or scripted import rules
Cutscene tool or CIDE2 plugin
CF user control plugin for CIDE2 - edit CFD files (replace current CF GUI application)

II. Game engine code
---------------------
Level loading
- allow loading static scene, physics and AI nodes not attached to entities
Actor animation system
 - activity/state animations (idle, walk, run etc)
 - SO action animations
 - fall and death animation through ragdoll, recovery from ragdoll (stand up after falling)
SaveLoad system refactoring
 - save animation tasks (mb not all), separate handling of AI-driven and static animation
 - save scene graph
 - save navigation regions state (after rewriting them)
 - savegame packing (continue data is unpacked, save is the same data packed)
Group AI
 - AISquad or smth
 - Group selection (using pick shapes and mouse-dragged rectangle converted to a frustum, CNodeAttrCamera::GetFrustum(RelRect))
 - Formations
Redesign AI NavRegions
 - take into account Get/Set lock status
 - cross-navdata consistency (now regions are per-navmesh, dependent on radius and non-iterable)
 - autocreate nav. regions under doors
 - nav controllers per-poly or only per-region? Per-region sounds sane. Polys can change every rebuild, regions are stable.
 - check is-in-region not only by poly area, but also by region bounds and actor position

III. RPG code
-------------
RPS (RolePlaying System)
Character class
PlayerCharacter class
PropCharSheet
Equipment system redesign + save/load
Trading and money
Combat
Subdual damage
Character states (incl. uncontrolled)
World time
Character list UI
Trading & money UI
Ingame UI
Main menu UI

IV. Optional features
---------------------
Ambient dialogues
Ambient goals and actions for NPCs
Reaction to agression
Day & night
Shadows
Particle systems
Skybox
Weather effects
Shader params animation

=========================================================
<AI, implement parts on demand>
=========================================================

General:
- Actor is a blackboard, all other are subsystems, sensors etc
- ???Use struct CBlackBoard BB;???
- AI LOD (like pActor->LOD and check this value at various sensors and subsystems).
  Can also declare some LOD values as enum members (like AILOD_Highest = 100, AILOD_Half = 50, AILOD_Freeze = 0)
- Research HTN planner and procedural animation topics

Senses:
- Disable some sensors or perceptors when they aren't needed (forex when we do not search for enemy or item,
  we can ignore these perceptors)

Bhv & Planning:
- In IsPlanValid during the planning avoid redundant calculations (one plan build is always sync & not time-sliced)

Navigation:
- implement at least 2 different link types (say, basic and door)
- implement humanlike NPC traversal action for each link type
- area under the feet (ground info)
- physics navmesh constraint in ActorPhysics
- Edge type to action map reading
- Query filter params reading
- Fix random locations (clamp findRandomPointAroundCircle to radius)

Movement:
- fix post-obstacle overshooting (bug with going left from start, near apples)
- fix some obstacle collisions by braking
- handle stuck
- handle dynamic obstacles with prediction
- Obstacle avoidance params reading
- Make Detour OA work

Dialogues:
- Dialogue mode
- Check CanSpeak ability

AnimSystem for brain (AI animation controller - movement, targeting, action reflection etc)
Body FSM (for each part like bottom(moving) & top (action)), body resources & locking
???sort memory facts, forex Obstacle by (distance - sum of radii), or all by confidence

[Starting cutscene/video + Arei starts talking at level start]

===============

<Misc>

Init functions with dependency check (InitScripting() { if !EventSrv->HasInstance() msg "you must init events first!" }

Array flag Sorted to signal that array is sorted now and optimized algorithms can be used (forex Array1.ContainsAll(Array2))

Dbg plugin windows: menu, sysinfo

static priorities for UI actions (actions listed in obj's popup) in UI desc (just like UINames now)
  or give up priorities and use explicitly set orders and default actions

Scripted Quest.OnStart to dynamically determine starting task, for example
Lua state wrapper with some util functions
Script parent constructors cascade!
	Lua: obj.class, class.parent (or .proto for both, or simply getmetatable?)
CFlags<T> or CFlags<int NumBits>

Error processing for LUA calls (see nlua stack dumping)

Fix CEGUI connections bug & write right (dis)connections
Clear all CEGUI windows when they aren't needed (CUIWindow::Init() opposite)
Event pools, ???CParams/CDataArray/CData pools?
Use pool allocation for properties to reuse them efficiently
Predefined StrIDs

===============
Anim: Rsrc, Data, Scene, Math, IO
Audio:
+ Core: Data
+ Debug: Data, Events, UI, Time, Core
+ Events: Core, Data
+ Input: Core, Events, Data
+ IO: Core, Data
+ Physics: [Bullet + LinearMath], Math, Rsrc, Data, IO, Scene (attrs)
+ Render: [D3D], Events, Input, Core, IO, Rsrc, Math, Data, Scene (attrs, refs in renderers)
+ Rsrc: Core, Data
+ Scene: Math, Core, IO, Data, Render, Events, Anim, Rsrc
+ Script: Core, Data, Events
+ Time: Data, Events, Core
+ UI: [CEGUI], Data, Events, Core, Render, Scene?!
+ Video: Core, Data, [DirectShow], [Theora], Render? (or return bit stream for texture)
