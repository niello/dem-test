// From the DetourPathCorridor.cpp:
//-# Construct the corridor object and call #init() to allocate its path buffer.
//-# Obtain a path from a #dtNavMeshQuery object.
//-# Use #reset() to set the agent's current position. (At the beginning of the path.)
//-# Use #setCorridor() to load the path and target.
//-# Use #findCorners() to plan movement. (This handles dynamic path straightening.)
//-# Use #movePosition() to feed agent movement back into the corridor. (The corridor will automatically adjust as needed.)
//-# If the target is moving, use #moveTargetPosition() to update the end of the corridor. 
//   (The corridor will automatically adjust as needed.)
//-# Repeat the previous 3 steps to continue to move the agent.
//Every time a move function is used there is a chance that the path will become non-optimial. Basically, the further 
//the target is moved from its original location, and the further the position is moved outside the original corridor, 
//the more likely the path will become non-optimal. This issue can be addressed by periodically running the 
//#optimizePathTopology() and #optimizePathVisibility() methods.
//All local mesh queries have distance limitations. (Review the #dtNavMeshQuery methods for details.) So the most accurate 
//use case is to move the position and target in small increments. If a large increment is used, then the corridor 
//may not be able to accurately find the new location.  Because of this limiation, if a position is moved in a large
//increment, then compare the desired and resulting polygon references. If the two do not match, then path replanning 
//may be needed.  E.g. If you move the target, check #getLastPoly() to see if it is the expected polygon.
